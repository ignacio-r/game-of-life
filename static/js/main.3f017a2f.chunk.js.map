{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","handleCellClick","k","newGrid","produce","gridCopy","mapToGrid","map","col","key","className","style","backgroundColor","undefined","onClick","showCell","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","neighbors","forEach","x","y","newI","newK","g","withinBounds","checkOutOfBounds","fewerThan2MoreThan3","deadWith3Neighbors","setTimeout","Math","random","generateRandomGrid","gridTemplateColumns","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f017a2f.chunk.js","sourcesContent":["import React, {useCallback, useRef, useState} from 'react';\nimport produce from 'immer';\nimport './App.css';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n]\n\nconst generateEmptyGrid = () => {\n    const rows = []\n    for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => 0));\n    }\n    return rows;\n}\n\nconst generateRandomGrid = () => {\n    const rows = []\n    for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => Math.random() > 0.7 ? 1 : 0));\n    }\n    return rows;\n}\n\n\nfunction withinBounds(newI, newK) {\n    return newI >= 0 && newI < numRows && newK >= 0 && newK < numCols;\n}\n\nfunction checkOutOfBounds(newI, newK, neighbors, g) {\n    if (withinBounds(newI, newK)) {\n        neighbors += g[newI][newK]\n    }\n    return neighbors;\n}\n\nfunction App() {\n\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n    });\n\n    function handleCellClick(i, k) {\n        return () => {\n            const newGrid = produce(grid, gridCopy => {\n                gridCopy[i][k] = gridCopy[i][k] ? 0 : 1;\n            })\n            setGrid(newGrid);\n        };\n    }\n\n    function showCell(i, k) {\n        return <div key={`${i}-${k}`}\n                    className={\"cell\"}\n                    style={{\n                        backgroundColor: grid[i][k] ? '#acc864' : undefined,\n                    }}\n                    onClick={handleCellClick(i, k)}>\n        </div>;\n    }\n\n    function mapToGrid() {\n        return grid.map((rows, i) => rows.map((col, k) =>\n            showCell(i, k)));\n    }\n\n    const [running, setRunning] = useState(false);\n    const runningRef = useRef(running);\n    runningRef.current = running\n\n    const runSimulation = useCallback(() => {\n        if (!runningRef.current) {\n            return;\n        }\n        setGrid((grid) => {\n            return produce(grid, gridCopy => {\n                function fewerThan2MoreThan3(neighbors, i, k) {\n                    if (neighbors < 2 || neighbors > 3) {\n                        gridCopy[i][k] = 0;\n                    }\n                }\n\n                function deadWith3Neighbors(i, k, neighbors) {\n                    if (grid[i][k] === 0 && neighbors === 3) {\n                        gridCopy[i][k] = 1;\n                    }\n                }\n\n                for (let i = 0; i < numRows; i++) {\n                    for (let k = 0; k < numCols; k++) {\n                        let neighbors = 0;\n                        operations.forEach(([x, y]) => {\n                            const newI = i + x;\n                            const newK = k + y;\n                            neighbors = checkOutOfBounds(newI, newK, neighbors, grid);\n                        })\n                        fewerThan2MoreThan3(neighbors, i, k);\n                        deadWith3Neighbors(i, k, neighbors);\n                    }\n                }\n            })\n        })\n\n        setTimeout(runSimulation, 100)\n    }, [])\n\n    function showGrid() {\n        return <div className={\"grid\"} style={{\n            gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}>\n            {mapToGrid()}\n        </div>;\n    }\n\n    return (\n        <>\n            <button onClick={() => {\n                setRunning(!running);\n                shouldRunSimulation();\n\n                function shouldRunSimulation() {\n                    if (!running) {\n                        runningRef.current = true;\n                        runSimulation();\n                    }\n                }\n            }}>\n                {running ? 'stop' : 'start'}\n            </button>\n            <button onClick={() => setGrid(generateRandomGrid())}>\n                random\n            </button>\n            <button onClick={() => setGrid(generateEmptyGrid())}>\n                clear\n            </button>\n            {showGrid()}\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}